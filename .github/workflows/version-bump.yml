name: Version Bump

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      
permissions:
  contents: write
  pull-requests: write

jobs:
  version-bump:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get current version
        id: current_version
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"
          
          # Remove 'v' prefix if present
          VERSION=${LATEST_TAG#v}
          echo "CURRENT_VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Calculate new version
        id: new_version
        run: |
          CURRENT_VERSION="${{ steps.current_version.outputs.CURRENT_VERSION }}"
          VERSION_TYPE="${{ inputs.version_type }}"
          
          # Split version into components
          IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR="${VERSION_PARTS[0]:-0}"
          MINOR="${VERSION_PARTS[1]:-0}"
          PATCH="${VERSION_PARTS[2]:-0}"
          
          # Increment based on version type
          case $VERSION_TYPE in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: v$NEW_VERSION"

      - name: Update version in pyproject.toml
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.NEW_VERSION }}"
          sed -i "s/^version = .*/version = \"$NEW_VERSION\"/" pyproject.toml
          
          # Commit the change
          git add pyproject.toml
          git commit -m "chore: bump version to v$NEW_VERSION"

      - name: Create and push tag
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.NEW_VERSION }}"
          git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
          git push origin main
          git push origin "v$NEW_VERSION"

      - name: Create pull request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: version-bump-${{ steps.new_version.outputs.NEW_VERSION }}
          title: "chore: bump version to v${{ steps.new_version.outputs.NEW_VERSION }}"
          body: |
            ## Version Bump
            
            This PR bumps the version from `v${{ steps.current_version.outputs.CURRENT_VERSION }}` to `v${{ steps.new_version.outputs.NEW_VERSION }}`.
            
            ### Type of change
            - Version bump type: **${{ inputs.version_type }}**
            
            ### Checklist
            - [ ] Version updated in pyproject.toml
            - [ ] Tag created and pushed
            - [ ] Docker images will be built and pushed upon merge
          labels: |
            version-bump
            automated